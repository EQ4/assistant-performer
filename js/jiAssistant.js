/*
*  copyright 2012 James Ingram
*  http://james-ingram-act-two.de/
*
*  Code licensed under MIT
*  https://github.com/notator/assistant-performer/blob/master/License.md
*
*  jiAssistant.js
*  The JI_NAMESPACE.assistant namespace which defines the
*    Assistant() constructor. 
*/

/*jslint bitwise: true, nomen: false, plusplus: true, white: true */

JI_NAMESPACE.namespace('JI_NAMESPACE.assistant');

JI_NAMESPACE.assistant = (function (window)
{
    "use strict";
    // begin var
    var
    CMD = MIDILib.constants.COMMAND,
    Message = MIDILib.message.Message,
    getMessage = MIDILib.message.getMessage,
    to14Bit = MIDILib.message.to14Bit,
    Sequence = MIDILib.sequence.Sequence,

    outputDevice,
    trackIsOnArray,

    // Assistant's midi input message types
    UNKNOWN = 0,
    ILLEGAL_INDEX = 1,
    END_OF_SEQUENCE = 2,
    CHANNEL_PRESSURE = 3, // generated by my E-MU keyboard, when "Aftertouch" is switched on.
    AFTERTOUCH = 4, // from EWI breath controller
    MODULATION_WHEEL = 5, // from EWI bite controller or E-MU modulation wheel
    PITCH_WHEEL = 6, // from EWI pitch bend controllers or E-MU pitch wheel
    NOTE_ON = 7,
    NOTE_OFF = 8,

    options, // performance options. This is the options object in jiAPControls. 
    reportEndOfPerformance, // callback
    recordingSequence, // initially set by assistant.playSpan(...), passed repeatedly to sequence.playSpan(...), returned by reportEndOfPerformance()
    reportMsPosition, // callback

    // An array of subsequence. Each subsequence is a Sequence.
    // There is one subsequence for each chord or rest symbol in the live performer's track, whereby
    // consecutive rests have one subsequence.
    allSubsequences,

    // The array of subsequence actually performed (from fromMsPositionInScore to toMsPositionInScore). Constructed in playSpan() from allSubsequences.
    // The first subsequence in span may be the second part of a subsequence which has been split at fromMsPositionInScore.
    // The last subsequence in span may be the first part of a subsequence which has been split at toMsPositionInScore.
    span,

    // these variables are initialized by playSpan() and used by handleMIDIInputEvent() 
    endIndex = -1,
    currentIndex = -1, // the index of the currently playing subsequence (which will be stopped when a noteOn or noteOff arrives).
    nextIndex = 0, // the index of the subsequence which will be played when a noteOn evt arrives
    performanceStartNow, // set when the first subsequence starts, used to set the reported duration of the performance 
    subsequenceStartNow, // set when a subsequence starts, used to rectify timestamps when it stops, and in the relative durations option 
    prevSubsequenceStartNow = 0.0, // used only with the relative durations option
    pausedNow = 0.0, // used only with the relative durations option (the time at which the subsequence was paused).

    stopped = true,
    paused = false,

    currentLivePerformersKeyPitch = -1, // -1 means "no key depressed". This value is set when the live performer sends a noteOff

    forwardSetState, // forward declaration, set to setState later.

    stop = function ()
    {
        var i, nSubsequences, sequenceMsDuration;

        // Message timestamps are set to the value of their moment's msPositioninScore.
        // If the assistant is using relative durations, this function is called
        // when the stop button is clicked, or when the performance reaches the
        // end marker. (See changeMessageTimestamps() below)
        function revertTimestamps (subsequence)
        {
            var
            nTracks = subsequence.tracks.length, moment,
            i, j, k, track, trackLength, messages, nMessages, timestamp;

            for (i = 0; i < nTracks; ++i)
            {
                track = subsequence.tracks[i];
                trackLength = track.moments.length;
                for (j = 0; j < trackLength; ++j)
                {
                    moment = track.moments[j];
                    timestamp = moment.msPositionInScore;
                    messages = moment.messages;
                    nMessages = messages.length;
                    for (k = 0; k < nMessages; ++k)
                    {
                        messages[k].timestamp = timestamp;
                    }
                }
            }
        }

        if (stopped === false)
        {
            nSubsequences = span.length;

            forwardSetState("stopped");

            if (options.assistantUsesAbsoluteDurations === false)
            {
                // reset the span
                // (During the assisted performance, the message.timestamps have changed according
                //  to the live performer's speed, but the moment.timestamps have not).
                for (i = 0; i < nSubsequences; ++i)
                {
                    revertTimestamps(span[i]);
                }
            }

            sequenceMsDuration = window.performance.now() - performanceStartNow;

            reportEndOfPerformance(recordingSequence, sequenceMsDuration);
        }
    },

    // If options.assistedPerformance === true, this is where input MIDI messages arrive, and where processing is going to be done.
    // Uses 
    //  endIndex  (= span.length -1 when stopped),
    //  currentIndex (= -1 when stopped) the index of the currently playing subsequence (which should be stopped when a noteOn or noteOff arrives).
    //  nextIndex (= 0 when stopped) the index of the subsequence which will be played when a noteOn message arrives
    handleMIDIInputEvent = function (data)
    {
        var inputEvent, inputEventType, command, cmd;

        function inputCommand(inputEvent)
        {
            return (inputEvent.data[0] & 0xF0) >> 8;
        }

        function inputChannel(inputEvent)
        {
            return (inputEvent.data[0] & 0xF);
        }

        function inputData1(inputEvent)
        {
            return inputEvent.data[1];
        }

        function inputData2(inputEvent)
        {
            return inputEvent.data[2];
        }

        function inputTimestamp(inputEvent)
        {
            return inputEvent.timestamp;
        }

        function inputEventToString(inputEvent)
        {
            var
            command = inputCommand(inputEvent),
            channel = inputChannel(inputEvent),
            data1 = inputData1(inputEvent),
            data2 = inputData2(inputEvent),
            timestamp = inputTimestamp(inputEvent);

            return "Input message: command:".concat(command).concat(", channel:").concat(channel).concat(", data1:").concat(data1).concat(", data2:").concat(data2).concat(", timestamp:").concat(timestamp);
        }

        // getInputEventType returns one of the following constants:
        // UNKNOWN = 0, ILLEGAL_INDEX = 1, END_OF_SEQUENCE = 2, CHANNEL_PRESSURE = 3, AFTERTOUCH = 4,
        // MODULATION_WHEEL = 5, PITCH_WHEEL = 6, NOTE_ON = 7, NOTE_OFF = 8
        function getInputEventType(command)
        {
            var
            type = UNKNOWN;

            switch (command)
            {
                case 0x80:
                    type = NOTE_OFF;
                    break;
                case 0x90:
                    if (inputData2(inputEvent) === 0) // velocity 0
                    {
                        type = NOTE_OFF;
                    }
                    else
                    {
                        type = NOTE_ON;
                    }
                    break;
                case 0xA0:
                    // generated by EWI controller
                    type = AFTERTOUCH;
                    break;
                case 0xB0:
                    if (inputData1(inputEvent) === 1)
                    {
                        type = MODULATION_WHEEL;
                    }
                    break;
                case 0xD0:
                    // This type is generated by my E-MU keyboard when "Aftertouch" is switched on.
                    type = CHANNEL_PRESSURE;
                    break;
                case 0xE0:
                    type = PITCH_WHEEL;
                    break;
                default:
                    type = UNKNOWN;
                    break;
            }

            return type;
        }

        // channel is the new message's channel
        // value is the new message's value
        function newControlMessage(controlData, channel, value)
        {
            var message, d;

            if (controlData.midiControl !== undefined)
            {
                // a normal control
                message = new Message(CMD.CONTROL_CHANGE + channel, controlData.midiControl, value, 0);
            }
            else if (controlData.statusHighNibble !== undefined)
            {
                // pitch-bend or channel pressure
                if (controlData.statusHighNibble === CMD.PITCH_WHEEL)
                {
                    d = to14Bit(value);
                    message = new Message(CMD.PITCH_WHEEL + channel, d.data1, d.data2, 0);
                }
                else if (controlData.statusHighNibble === CMD.CHANNEL_AFTERTOUCH)
                {
                    message = new Message(CMD.CHANNEL_AFTERTOUCH + channel, value, 0, 0);
                }
                else
                {
                    throw "Illegal controlData.";
                }
            }
            else
            {
                throw "Illegal controlData.";
            }

            return message;
        }

        function handleController(controlData, value, usesSoloTrack, usesOtherTracks)
        {
            var controlMessages = [], nControlMessages, i,
                nTracks = allSubsequences[0].tracks.length;

            if (usesSoloTrack && usesOtherTracks)
            {
                for (i = 0; i < nTracks; ++i)
                {
                    if (trackIsOnArray[i])
                    {
                        controlMessages.push(newControlMessage(controlData, i, value));
                    }
                }
            }
            else if (usesSoloTrack)
            {
                controlMessages.push(newControlMessage(controlData, options.livePerformersTrackIndex, value));
            }
            else if (usesOtherTracks)
            {
                for (i = 0; i < nTracks; ++i)
                {
                    if (trackIsOnArray[i] && i !== options.livePerformersTrackIndex)
                    {
                        controlMessages.push(newControlMessage(controlData, i, value));
                    }
                }
            }
            else
            {
                throw "Either usesSoloTrack or usesOtherTracks must be set here.";
            }

            nControlMessages = controlMessages.length;
            for (i = 0; i < nControlMessages; ++i)
            {
                controlMessages[i].send(outputDevice);
            }
        }

        function silentlyCompleteCurrentlyPlayingSubsequence()
        {
            // currentIndex is the index of the currently playing subsequence
            // (which should be silently completed when a noteOn arrives).
            if (currentIndex >= 0 && currentIndex < span.length)
            {
                span[currentIndex].finishSilently();
            }
        }

        // Subsequence calls this function with three arguments, but those arguments are ignored here.
        function reportEndOfSubsequence()
        {
            if (currentLivePerformersKeyPitch === -1) // key is up
            {
                if (currentIndex === endIndex)
                {
                    stop();
                }
                else if (span[nextIndex].chordSubsequence !== undefined)
                {
                    reportMsPosition(span[nextIndex].msPositionInScore);
                }
            }
            else if (nextIndex <= endIndex && span[nextIndex].restSubsequence !== undefined)
            {
                reportMsPosition(span[nextIndex].msPositionInScore);
            }
            // else wait for noteOff message (see handleNoteOff below).
        }

        function playSubsequence(subsequence, options)
        {
            var prevSubsequenceScoreMsDuration,
                durationFactor;

            // Message timestamps are adjusted for the durationFactor.
            // The msPositionInScore of each message's containing moment is unchanged, and is
            // used to revert the message timestamps when the performance ends.
            // (See revertTimestamps() below)
            function changeEventTimestamps (subsequence, durationFactor)
            {
                var
                newSubsequenceMsPosition = subsequence.msPositionInScore * durationFactor,
                nTracks = subsequence.tracks.length, moment,
                i, j, k, track, trackLength, messages, nEvents, timestamp;

                for (i = 0; i < nTracks; ++i)
                {
                    track = subsequence.tracks[i];
                    trackLength = track.moments.length;
                    for (j = 0; j < trackLength; ++j)
                    {
                        moment = track.moments[j];
                        timestamp = newSubsequenceMsPosition + (moment.msPositionInScore * durationFactor);
                        messages = moment.messages;
                        nEvents = messages.length;
                        for (k = 0; k < nEvents; ++k)
                        {
                            messages[k].timestamp = timestamp;
                        }
                    }
                }
            }

            if (options.assistantUsesAbsoluteDurations === false)
            {
                if (currentIndex > 0)
                {
                    prevSubsequenceScoreMsDuration = span[currentIndex].msPositionInScore - span[currentIndex - 1].msPositionInScore;
                    durationFactor = (subsequenceStartNow - prevSubsequenceStartNow) / prevSubsequenceScoreMsDuration;
                    // durations in the subsequence are multiplied by durationFactor
                    changeEventTimestamps(subsequence, durationFactor);
                }
                prevSubsequenceStartNow = subsequenceStartNow; // used only with the relative durations option
            }

            // if options.assistantUsesAbsoluteDurations === true, the durations will already be correct in all subsequences.
            subsequence.playSpan(outputDevice, 0, Number.MAX_VALUE, trackIsOnArray, recordingSequence, reportEndOfSubsequence, reportMsPosition);
        }

        function handleNoteOff(inputEvent)
        {
            //console.log("NoteOff, pitch:", inputData1(inputEvent).toString(), " velocity:", inputEvent.data2.toString());

            if (inputData1(inputEvent) === currentLivePerformersKeyPitch)
            {
                currentLivePerformersKeyPitch = -1;

                silentlyCompleteCurrentlyPlayingSubsequence();

                if (currentIndex === endIndex) // see reportEndOfSpan() above 
                {
                    stop();
                }
                else if (span[nextIndex].restSubsequence !== undefined) // only play the next subsequence if it is a restSubsequence
                {
                    currentIndex = nextIndex++;
                    subsequenceStartNow = inputEvent.receivedTime;
                    playSubsequence(span[currentIndex], options);
                }
                else if (nextIndex <= endIndex)
                {
                    reportMsPosition(span[nextIndex].msPositionInScore);
                }
            }
        }

        function handleNoteOn(inputEvent, overrideSoloPitch, overrideOtherTracksPitch, overrideSoloVelocity, overrideOtherTracksVelocity)
        {
            var subsequence;

            // Shifts the pitches in the whole performer's track up or down so that the lowest pitch in the
            // first noteOn moment is newPitch. Similarly with velocity.
            function overridePitchAndOrVelocity (subsequence, soloTrackIndex, newPitch, newVelocity,
                overrideSoloPitch, overrideOtherTracksPitch, overrideSoloVelocity, overrideOtherTracksVelocity)
            {
                var
                NOTE_ON_CMD = CMD.NOTE_ON,
                track = subsequence.tracks[soloTrackIndex], message, lowestNoteOnEvt, pitchDelta, velocityDelta;

                // Returns the lowest NoteOn message in the first moment in the track to contain a NoteOnMessage.
                // Returns null if there is no such message.
                function findLowestNoteOnEvt(NOTE_ON_CMD, track)
                {
                    var i, j, message, moment, nEvents, nMoments = track.moments.length, lowestNoteOnMessage = null;

                    for (i = 0; i < nMoments; ++i)
                    {
                        moment = track.moments[i];
                        nEvents = moment.messages.length;
                        for (j = 0; j < nEvents; ++j)
                        {
                            message = moment.messages[j];
                            if ((message.command() === NOTE_ON_CMD)
                            && (lowestNoteOnMessage === null || message.data[1] < lowestNoteOnMessage.data1))
                            {
                                lowestNoteOnMessage = message;
                            }
                        }
                        if (lowestNoteOnMessage !== null)
                        {
                            break;
                        }
                    }
                    return lowestNoteOnMessage;
                }

                function midiValue(value)
                {
                    var result = (value >= 0) ? value : 0;
                    result = (value <= 127) ? value : 127;
                    return result;
                }

                function adjustTracks(NOTE_ON_CMD, soloTrackIndex, pitchDelta, velocityDelta,
                    overrideSoloPitch, overrideOtherTracksPitch, overrideSoloVelocity, overrideOtherTracksVelocity)
                {
                    var nTracks = subsequence.tracks.length, i, j, k, nMoments, moment, nEvents;

                    for (i = 0; i < nTracks; ++i)
                    {
                        if ((i === soloTrackIndex && (overrideSoloPitch || overrideSoloVelocity))
                        || (i !== soloTrackIndex && (overrideOtherTracksPitch || overrideOtherTracksVelocity)))
                        {
                            track = subsequence.tracks[i];
                            nMoments = track.moments.length;

                            for (j = 0; j < nMoments; ++j)
                            {
                                moment = track.moments[j];
                                nEvents = moment.messages.length;
                                for (k = 0; k < nEvents; ++k)
                                {
                                    message = moment.messages[k];
                                    if (message.command() === NOTE_ON_CMD)
                                    {
                                        message.data[1] = midiValue(message.data[1] + pitchDelta);
                                        message.data[2] = midiValue(message.data[2] + velocityDelta);
                                    }
                                }
                            }
                        }
                    }
                }

                lowestNoteOnEvt = findLowestNoteOnEvt(NOTE_ON_CMD, track);
                if (lowestNoteOnEvt !== null)
                {
                    pitchDelta = (overrideSoloPitch || overrideOtherTracksPitch) ? (newPitch - lowestNoteOnEvt.data1) : 0;
                    velocityDelta = (overrideSoloVelocity || overrideOtherTracksVelocity) ? (newVelocity - lowestNoteOnEvt.data2) : 0;

                    if (pitchDelta !== 0 || velocityDelta !== 0)
                    {
                        adjustTracks(NOTE_ON_CMD, soloTrackIndex, pitchDelta, velocityDelta,
                            overrideSoloPitch, overrideOtherTracksPitch, overrideSoloVelocity, overrideOtherTracksVelocity);
                    }
                }
            }

            //console.log("NoteOn, pitch:", inputData1(inputEvent).toString(), " velocity:", inputData2(inputEvent).toString());

            subsequenceStartNow = inputTimestamp(inputEvent);

            currentLivePerformersKeyPitch = inputData1(inputEvent);

            if (inputData2(inputEvent) > 0)
            {
                silentlyCompleteCurrentlyPlayingSubsequence();

                if (nextIndex === 0)
                {
                    performanceStartNow = inputTimestamp(inputEvent);
                }

                subsequenceStartNow = inputTimestamp(inputEvent);

                if (nextIndex === 0 || (nextIndex <= endIndex && span[nextIndex].chordSubsequence !== undefined))
                {
                    currentIndex = nextIndex++;
                    subsequence = span[currentIndex];
                    if (overrideSoloPitch || overrideOtherTracksPitch || overrideSoloVelocity || overrideOtherTracksVelocity)
                    {
                        overridePitchAndOrVelocity(subsequence, options.livePerformersTrackIndex,
                            inputData1(inputEvent), inputData2(inputEvent),
                            overrideSoloPitch, overrideOtherTracksPitch, overrideSoloVelocity, overrideOtherTracksVelocity);
                    }
                    playSubsequence(subsequence, options);
                }
            }
            else // velocity 0 is "noteOff"
            {
                handleNoteOff(inputEvent);
            }
        }

        inputEvent = getEvent(data, window.performance.now());

        inputEventType = getInputEventType(data[0] & 0xF0);

        switch (inputEventType)
        {
            case CHANNEL_PRESSURE: // EMU "aftertouch"
                console.log("Channel (=key) Pressure, value:", inputData1(inputEvent).toString());
                if (options.pressureSubstituteControlData !== null)
                {
                    handleController(options.pressureSubstituteControlData, inputData1(inputEvent), // ACHTUNG! data1 is correct!
                                                options.usesPressureSolo, options.usesPressureOtherTracks);
                }
                break;
            case AFTERTOUCH: // EWI breath controller
                console.log("Aftertouch, value:", inputData2(inputEvent).toString());
                if (options.pressureSubstituteControlData !== null)
                {
                    handleController(options.pressureSubstituteControlData, inputData2(inputEvent),
                                                options.usesPressureSolo, options.usesPressureOtherTracks);
                }
                break;
            case MODULATION_WHEEL: // EWI bite, EMU modulation wheel
                console.log("Modulation Wheel, value:", inputData2(inputEvent).toString());
                if (options.modSubstituteControlData !== null)
                {
                    handleController(options.modSubstituteControlData, inputData2(inputEvent),
                                                options.usesModSolo, options.usesModOtherTracks);
                }
                break;
            case PITCH_WHEEL: // EWI pitch bend up/down controllers, EMU pitch wheel
                console.log("Pitch Wheel, value:", inputData2(inputEvent).toString());
                if (options.pitchBendSubstituteControlData !== null)
                {
                    handleController(options.pitchBendSubstituteControlData, inputData2(inputEvent),
                                                options.usesPitchBendSolo, options.usesPitchBendOtherTracks);
                }
                break;
            case NOTE_ON:
                handleNoteOn(inputEvent,
                    options.overrideSoloPitch, options.overrideOtherTracksPitch,
                    options.overrideSoloVelocity, options.overrideOtherTracksVelocity);
                break;
            case NOTE_OFF:
                handleNoteOff(inputEvent);
                break;
            case END_OF_SEQUENCE:
                stop();
                break;
            case UNKNOWN:
                // This might be program change (0xC0 = 192) or system exclusive (0xF0 = 240),
                // neither of which I'm currently expecting in the input.
                command = inputCommand(inputEvent);
                cmd = null;
                if (command === 0xC0)
                {
                    cmd = "PROGRAM CHANGE";
                }
                else
                {
                    cmd = "SYSTEM EXCLUSIVE";
                }
                if (cmd !== null)
                {
                    throw "Unexpected " + cmd + " command in input";
                }
                else
                {
                    throw "Error: Unexpected controller message ".concat(inputEventToString(inputEvent));
                }
            case ILLEGAL_INDEX:
                throw "illegal index";
        }
    },

    setState = function (state)
    {
        function closeInputDevice(options)
        {
             if (options.inputDevice !== undefined && options.inputDevice !== null)
             {
                 options.inputDevice.close();
             }
        }

        switch (state)
        {
            case "stopped":
                if (currentIndex >= 0 && span[currentIndex].isStopped() === false)
                {
                    span[currentIndex].stop();
                }
                // these variables are also set in playSpan() when the state is first set to "running"
                endIndex = (span === undefined) ? -1 : (span.length - 1); // the index of the (unplayed) end chord or rest or endBarline
                currentIndex = -1;
                nextIndex = 0;
                prevSubsequenceStartNow = 0.0; // used only with the relative durations option
                pausedNow = 0.0; // used only with the relative durations option (the time at which the subsequence was paused).
                stopped = true;
                paused = false;
                closeInputDevice(options);
                break;
            case "paused":
                stopped = false;
                paused = true;
                closeInputDevice(options);
                break;
            case "running":
                stopped = false;
                paused = false;
                options.getInputDevice(handleMIDIInputEvent);
                break;
            default:
                throw "Unknown sequencer state!";
        }
    },

    // Can only be called when paused is true.
    resume = function ()
    {
        if (paused === true)
        {
            if (options.assistantUsesAbsoluteDurations === false)
            {
                subsequenceStartNow = window.performance.now();
                prevSubsequenceStartNow += (subsequenceStartNow - pausedNow);
            }
            span[currentIndex].resume();
            setState("running");
        }
    },

    // Can only be called while running
    // (stopped === false && paused === false)
    pause = function ()
    {
        if (stopped === false && paused === false)
        {
            pausedNow = window.performance.now();

            span[currentIndex].pause();
            setState("paused");
        }
        else
        {
            throw "Attempt to pause a stopped or paused sequence.";
        }
    },

    isStopped = function ()
    {
        return stopped === true;
    },

    isPaused = function ()
    {
        return paused === true;
    },

    // This function is called when options.assistedPerformance === true and the Go button is clicked (in the performance controls).
    // If options.assistedPerformance === false, the main sequence.playSpan(...) is called instead.
    // The assistant's allSubsequences array contains the whole piece as an array of sequence, with one sequence per performer's
    // rest or chord, whereby consecutive rests in the performer's track have been merged.
    // This function first constructs a span, which is the section of the allSubsequences array between fromMsPositionInScore and toMsPositionInScore.
    // Creating the span does *not* change the data in allSubsequences. The start and end markers can therefore be moved between
    // performances
    playSpan = function (outDevice, fromMsPositionInScore, toMsPositionInScore, argTrackIsOnArray, recordingSeq)
    {
        function getSpan(allSubsequences, fromMsPositionInScore, toMsPositionInScore)
        {
            var nSubsequences = allSubsequences.length,
                i = nSubsequences - 1,
                maxIndex = i, lastSubsequence,
                subsequence = null,
                span = []; // an array of sequences

            // returns the portion of subsequence before toMsPositionInScore
            // to which a "finalBarline" moment has been added.
            function newRestSequenceBeforeMsPos(sequence, toMsPositionInScore)
            {
                var
                i, newTrack, oldTrack, nTracks = subsequence.tracks.length,
                j, nMoments, timestamp, restSequence;

                function appendFinalBarlineMoment(track, msPositionInScore, timestamp)
                {
                    var finalBarlineMoment, restEvt = {};

                    finalBarlineMoment = new MIDILib.moment.Moment(msPositionInScore);
                    Object.defineProperty(finalBarlineMoment, "restStart", { value: true, writable: false });
                    finalBarlineMoment.timestamp = timestamp;

                    track.addMoment(finalBarlineMoment);
                }

                restSequence = new Sequence(nTracks);
                Object.defineProperty(restSequence, "restSubsequence", { value: true, writable: false });

                for (i = 0; i < nTracks; ++i)
                {
                    newTrack = restSequence.tracks[i];
                    oldTrack = subsequence.tracks[i];
                    nMoments = oldTrack.moments.length;
                    for (j = 0; j < nMoments; ++j)
                    {
                        if (oldTrack.moments[j].msPositionInScore >= toMsPositionInScore)
                        {
                            timestamp = oldTrack.moments[j].messages[0].timestamp;
                            break;
                        }
                        newTrack.moments.push(oldTrack.moments[j]);
                    }

                    appendFinalBarlineMoment(newTrack, toMsPositionInScore, timestamp);
                }
                return restSequence;
            }

            // returns the portion of subsequence beginning at fromMsPositionInScore
            // as a new rest subsequence.
            function newRestSequenceAfterMsPos(subsequence, fromMsPositionInScore)
            {
                var
                i, newTrack, oldTrack, nTracks = subsequence.tracks.length,
                j, nMoments, k, restSequence;

                restSequence = new Sequence(nTracks);
                Object.defineProperty(restSequence, "restSubsequence", { value: true, writable: false });

                for (i = 0; i < nTracks; ++i)
                {
                    newTrack = restSequence.tracks[i];
                    oldTrack = subsequence.tracks[i];
                    nMoments = oldTrack.moments.length;
                    for (j = 0; j < nMoments; ++j)
                    {
                        if (oldTrack.moments[j].msPositionInScore >= fromMsPositionInScore)
                        {
                            k = j;
                            break;
                        }
                    }
                    for (j = k; j < nMoments; ++j)
                    {
                        newTrack.moments.push(oldTrack.moments[j]);
                    }
                }
                return restSequence;
            }


            if (i > 0)
            {
                subsequence = allSubsequences[i];
                while (i > 0 && subsequence.msPositionInScore > fromMsPositionInScore)
                {
                    --i;
                    subsequence = allSubsequences[i];
                }
            }

            // subsequence.msPositionInScore <= fromMsPositionInScore
            if (subsequence.restSubsequence !== undefined && subsequence.msPositionInScore < fromMsPositionInScore)
            {
                subsequence = newRestSequenceAfterMsPos(subsequence, fromMsPositionInScore); // returns a new restSubsequence starting at fromMsPositionInScore
            }

            span.push(subsequence); // the first subsequence

            while (i < maxIndex)
            {
                ++i;
                subsequence = allSubsequences[i];
                if (subsequence.msPositionInScore >= toMsPositionInScore)
                {
                    break;
                }
                span.push(subsequence);
            }

            lastSubsequence = span.pop();

            // lastSubsequence.msPositionInScore < toMsPositionInScore
            if (lastSubsequence.restSubsequence !== undefined)
            {
                // newRestSequenceBeforeMsPos() returns a new subsequence which is
                // a copy of the beginning of lastSubsequence up to (but not including) toMsPositionInScore,
                // to which a "finalBarline" moment has been added.
                lastSubsequence = newRestSequenceBeforeMsPos(lastSubsequence, toMsPositionInScore);
            }

            //finalBarline = finalBarlineSubsequence(lastSubsequence.tracks.length, toMsPositionInScore);
            span.push(lastSubsequence);

            return span;
        }

        setState("running");
        outputDevice = outDevice;
        // trackIsOnArray is read only
        trackIsOnArray = argTrackIsOnArray;
        span = getSpan(allSubsequences, fromMsPositionInScore, toMsPositionInScore);
        recordingSequence = recordingSeq;

        endIndex = span.length - 1;
        currentIndex = -1;
        nextIndex = 0;
        prevSubsequenceStartNow = -1;
    },

    // creats an Assistant, complete with private subsequences
    // called when the Start button is clicked, and options.assistedPerformance === true
    Assistant = function (sequence, apControlOptions, reportEndOfWholePerformance, reportMillisecondPosition)
    {
        // Returns an array of Sequence.
        // Each subsequence in the array contains moments from the global sequence.
        // A subsequence is first created for each chord or rest symbol and for the final barline in the live performer's track. 
        // Subsequences corresponding to a live performer's chord are given a chordSubsequence attribute (=true).
        // Subsequences corresponding to a live performer's rest are given a restSubsequence attribute (=true).
        // Consecutive restSubsequences are merged: When performing, consecutive rests in the performer's track are treated
        // as one. The live performer only starts the first one (with a noteOff). Following rests play automatically until
        // the next chord (chordSubsequence) in the performer's track.
        function getSubsequences(sequence, livePerformersTrackIndex)
        {
            var
            subsequences = [],
            nTracks = sequence.tracks.length,
            trackIndex;

            // The returned empty subsequences contain either a restSubsequence or a chordSubsequence attribute, 
            // depending on whether they correspond to a live player's rest or chord.
            // They also contain the correct number of empty tracks.
            function getEmptySubsequences(nTracks, livePerformersTrack)
            {
                var s, emptySubsequences = [],
                    performersMidiMoments, nPerformersMidiMoments, i,
                    moment;

                performersMidiMoments = livePerformersTrack.moments;
                nPerformersMidiMoments = performersMidiMoments.length;
                for (i = 0; i < nPerformersMidiMoments; ++i)
                {
                    s = null;
                    moment = performersMidiMoments[i];

                    if (moment.restStart !== undefined)
                    {
                        s = new Sequence(nTracks);
                        Object.defineProperty(s, "restSubsequence", { value: true, writable: false });
                        //console.log("Rest Subsequence: msPositionInScore=" + s.msPositionInScore.toString());
                    }
                    else if (moment.chordStart !== undefined)
                    {
                        s = new Sequence(nTracks);
                        Object.defineProperty(s, "chordSubsequence", { value: true, writable: false });
                        //console.log("Chord Subsequence: msPositionInScore=" + s.msPositionInScore.toString());
                    }

                    if (s !== null)
                    {
                        emptySubsequences.push(s);
                    }
                }
                return emptySubsequences;
            }

            function fillSubsequences(subsequences, sequence, trackIndex)  // 'base' function in outer scope.
            {
                var track, moments = sequence.tracks[trackIndex].moments,
                    moment, momentsIndex = 0,
                    nMidiMoments = moments.length,
                    subsequence, subsequencesIndex,
                    nSubsequences = subsequences.length, // including the final barline
                    subsequenceMsPositionInScore, nextSubsequenceMsPositionInScore;

                function getNextSubsequenceMsPositionInScore(subsequences, subsequencesIndex, nSubsequences)
                {
                    var nextSubsequenceMsPositionInScore, nextIndex = subsequencesIndex + 1;

                    if (nextIndex < nSubsequences)
                    {
                        nextSubsequenceMsPositionInScore = subsequences[nextIndex].msPositionInScore;
                    }
                    else
                    {
                        nextSubsequenceMsPositionInScore = Number.MAX_VALUE;
                    }

                    return nextSubsequenceMsPositionInScore;
                }

                function setMessageTimestampsRelativeToSubsequence(messages, subsequenceMsPositionInScore)
                {
                    var i, nMessages = messages.length;

                    for (i = 0; i < nMessages; ++i)
                    {
                        messages[i].timestamp -= subsequenceMsPositionInScore;
                    }
                }

                // nSubsequences includes the final barline (a restSubsequence which may contain noteOff messages).
                for (subsequencesIndex = 0; subsequencesIndex < nSubsequences; ++subsequencesIndex)
                {
                    subsequence = subsequences[subsequencesIndex];
                    subsequenceMsPositionInScore = subsequence.msPositionInScore;
                    nextSubsequenceMsPositionInScore = getNextSubsequenceMsPositionInScore(subsequences, subsequencesIndex, nSubsequences);
                    track = subsequence.tracks[trackIndex];
                    // nMidiMoments may be 0 (an empty track)
                    if (nMidiMoments > 0 && momentsIndex < nMidiMoments)
                    {
                        moment = moments[momentsIndex];
                        setMessageTimestampsRelativeToSubsequence(moment.messages, subsequenceMsPositionInScore);

                        while (moment.msPositionInScore < nextSubsequenceMsPositionInScore)
                        {
                            track.addMoment(moment);
                            ++momentsIndex;
                            if (momentsIndex === nMidiMoments)
                            {
                                break;
                            }
                            moment = moments[momentsIndex];
                        }
                    }
                }
            }

            // When performing, consecutive rests in the performer's track are treated as one.
            // The live performer only starts the first one (with a noteOff). Following rests
            // play automatically until the next chord in the performer's track.
            function mergeRestSubsequences(subsequences)
            {
                var i, nSubsequences = subsequences.length,
                newSubsequences = [], lastNewS,
                nTracks = sequence.tracks.length,
                subS, t, currentTrack, trackToAppend, nMoments,
                iMom;

                newSubsequences.push(subsequences[0]);

                for (i = 1; i < nSubsequences; ++i)
                {
                    lastNewS = newSubsequences[newSubsequences.length - 1];
                    if (lastNewS.restSubsequence !== undefined && subsequences[i].restSubsequence !== undefined)
                    {
                        subS = subsequences[i];
                        // append subS to lastnewS
                        for (t = 0; t < nTracks; ++t)
                        {
                            currentTrack = lastNewS.tracks[t];
                            trackToAppend = subS.tracks[t];
                            nMoments = trackToAppend.moments.length;
                            for (iMom = 0; iMom < nMoments; ++iMom)
                            {
                                currentTrack.addMoment(trackToAppend.moments[iMom]);
                            }
                        }
                    }
                    else
                    {
                        newSubsequences.push(subsequences[i]);
                    }
                }

                return newSubsequences;
            }

            subsequences = getEmptySubsequences(nTracks, sequence.tracks[livePerformersTrackIndex]);

            for (trackIndex = 0; trackIndex < nTracks; ++trackIndex)
            {
                fillSubsequences(subsequences, sequence, trackIndex);
                //fillSubsequences(subsequences, sequence.tracks[trackIndex].moments);
            }

            subsequences = mergeRestSubsequences(subsequences);

            return subsequences;
        }

        if (!(this instanceof Assistant))
        {
            return new Assistant(sequence, apControlOptions, reportEndOfWholePerformance, reportMillisecondPosition);
        }

        if (apControlOptions === undefined || apControlOptions.assistedPerformance !== true)
        {
            throw ("Error creating Assistant.");
        }

        options = apControlOptions;

        setState("stopped");

        reportEndOfPerformance = reportEndOfWholePerformance;
        reportMsPosition = reportMillisecondPosition;

        allSubsequences = getSubsequences(sequence, options.livePerformersTrackIndex);

        // Starts an assisted performance 
        this.playSpan = playSpan;

        // these are called by the performance controls
        this.pause = pause; // pause()        
        this.resume = resume; // resume()
        this.stop = stop; // stop()

        this.isStopped = isStopped; // isStopped()
        this.isPaused = isPaused; // isPaused()

        this.subsequences = allSubsequences; // consulted by score when setting start and end marker positions.
    },

    publicAPI =
    {
        // empty Assistant constructor
        Assistant: Assistant
    };
    // end var

    forwardSetState = setState;

    return publicAPI;

}(window));
