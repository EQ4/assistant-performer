
copyright 2013 James Ingram
http://james-ingram-act-two.de/

Code licensed under MIT
https://github.com/notator/assistant-performer/blob/master/License.md

midiLib/MIDILibOverview.txt:

The Javascript files in this directory (midiLib) together define a library of
objects in the MIDILib namespace.
This file (midiLib/MIDILibOverview.txt) is intended to provide a quick overview
of what is in this library.
For more detailed information, see the comments in the individual files.

Note on MIDI capitalisation in names:
This project always uses all uppercase or all lowercase characters for MIDI.
i.e. 'midi' or 'MIDI' is used, never 'mIDI' or 'Midi'.

The following list of files is in order of dependency.

midiLib/Namespace.js
	Defines the MIDILib namespace itself.

midiLib/JazzWebMIDIAPI.js
	The MIDILib.jazzWebMIDIAPI namespace which implements the W3C Web MIDI
	API (as defined on 17.01.2013) using the Jazz plugin.
	This code defines a single function:
		
		init()

	which sets up various window attributes, where necessary.
	In particular, after calling
	MIDILib.jazzWebMIDIAPI.init(window), the MIDIAccess object can be
	retrieved by calling
	window.navigator.requestMIDIAccess(onSuccessCallback, onErrorCallback);

midiLib/Constants.js
	The MIDILib.constants namespace, which exposes
	four objects containing	standard MIDI constant definitions:
        COMMAND
        REAL_TIME
        CONTROL
        SYSTEM_EXCLUSIVE
	and a function
		isRealTimeStatus(statusByte)
			for testing if a status byte is for a realTime message.

midiLib/Message.js
	The MIDILib.message namespace which exposes	two constructors:

		Message(status, data1, data2)
			for constructing 1- 2- or 3-byte MIDI messages which are
			not SysExMessages.

		SysExMessage(data)
			for explicitly constructing system exclusive messages.

midiLib/Moment.js
	The MIDILib.moment namespace which exposes a single constructor:

		Moment(msPositionInScore)

	A moment contains an array of messages, all of which are to	be sent
	at the same time on the same channel.
	This constructor is used when creating Moments from files such as
	scores or Standard MIDI Files. Empty Moments having no relation to
	such files, can be constructed with an empty argument list.
	The moment.messages array contains the messages themselves. They are
	always sent 'at the same time' (in the order in which they occur
	in the array).

midiLib/Track.js
	The MIDILib.track namespace which exposes a single constructor:

		Track()

	A track is conceptually a temporally ordered list of Moments, all of
	which share the same channel, and none of which is synchronous with any
	of the others. Moments are, if necessary, merged when added to the track.
	Tracks correspond to voices in scores and channels in both scores and
	Standard MIDI Files. There may be 1 or 2 voices per	staff in a score.

midiLib/Sequence.js
	The MIDILib.sequence namespace which exposes a single constructor:

		Sequence(nTracks)

	A sequence contains an array of parallel tracks, all of which start at the
	same time. The new Sequence has nTracks new, empty Tracks.
	The Tracks in the array are in order of voice (i.e. channel) from top to
	bottom in a score.system.
	When loaded from a score,
		tracks[0] contains all the moments for voices[0] (on channel 0) on all
		systems in the score,
		tracks[1] contains all the moments for voices[1] (on channel 1) on all
		systems in the score,
		etc. 

midiLib/StandardMIDIFile.js
	The MIDILib.standardMIDIFile namespace which exposes the function
		standardMIDIFile = sequenceToSMF(sequence);
	This function converts a Sequence to a Standard MIDI File (actually a Blob).
    The SMF can be made downloadable by connecting it to a document link element.
	When the user clicks the link, the browser saves the file on the user's
	computer. See https://developer.mozilla.org/en/docs/DOM/Blob.
      

