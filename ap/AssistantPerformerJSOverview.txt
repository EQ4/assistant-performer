
copyright 2013 James Ingram
http://james-ingram-act-two.de/

Code licensed under MIT
https://github.com/notator/assistant-performer/blob/master/License.md

ap/AssistantPerformerJSOverview.txt:

This file is intended to provide a quick overview of the files in the ap folder.
For more detailed information, see the comments in the individual files.

The Javascript files in this directory (ap) together define the Assistant
Performer application. They use (are dependent on) the files in all the other
folders. In particular, they are dependent on the MIDI library defined by the
files in the midiLib folder (the MIDILib namespace).

The following list of files is in order of dependency.

ap/Namespace.js
	Defines the _AP namespace. _AP is the namespace containing all
	the other code in this folder (ap).
	
ap/Markers.js
	The _AP.markers namespace. Defines constructors for the

		StartMarker,
		EndMarker and 
		RunningMarker objects.

	The StartMarker and EndMarker are the objects in the user interface
	which determine	where a performance begins and ends.
	The RunningMarker is the line which shows the current position during
	a performance.

ap/Palettes.js
	The _AP.palettes namespace. Defines constructors for
	
		ChordDef(chordDefNode)
			This constructor reads an XML node into a ChordDef.
			A ChordDef is a data structure containing the definition of a
			MIDIChord (see below).

		Palettes()
			Constructs the palettes defined in a "midiDefs" element in the
			first SVG page embedded in a score's HTML.(The score being the
			current document.) See
			http://james-ingram-act-two.de/open-source/svgScoreExtensions.html
			Palettes is an array of palette. Each palette is an array of ChordDef
			and RestDef. Note that RestDefs are placeholders in palettes. They
			are never actually referred to outside this namespace, so their
			definition is not public.
     
ap/MIDIChord.js
	The _AP.midiChord namespace. Defines the following constructors, which are used
	when reading the score to produce playable MIDI messages (see Score.js below):
		
		// Arguments:
		// channel: the MIDI channel on which to send this MIDIChord
		// chordDef: the chord definition (see above)
		// timeObject: the chord symbol's temporal and spatial position (see below)
		// speed: a factor by which the default durations in the score can be
		// divided. Higher speed means shorter durations inside the MIDIChord. 
		MIDIChord(channel, chordDef, timeObject, speed)
			A MIDIChord contains a private array of Moments containing all
			the MIDI messages required for playing an (ornamented) chord.
			A Moment is a collection of logically synchronous MIDI messages.
			(see MIDILib/Moment.js).
			A MIDIChord has one public function:
				addToTrack(track)
					which moves the midiChord's Moments onto the track.

		// Argument:
		// timeObject: the rest symbol's temporal and spatial position (see below)
		MIDIRest(timeObject)
			A MIDIRest is like a MIDIChord having a single, empty Moment.
			MIDIRests are necessary so that running cursors can be moved to rest
			symbols. In some circumstances, a rest moment can also contain MIDI
			note off messages.

		Note about TimeObjects:
		The score contains spatial and temporal information for each chord and rest
		symbol. The part of that information needed by the Assistant Performer is
		encapsulated in the timeObject passed to the above constructors.
		A timeObject has three attributes:
			// the (default) number of milliseconds from the start of a performance
			msPosition
			// the (default) millisecond duration.
			msDuration
			// the x-coordinate (alignment) re the left side of the page.
			alignmentX 
		A chord or rest symbol's y-coordinate is related to the position of its
		page, system and staff - which are organised separately.
 
ap/Assistant.js
	The _AP.assistant namespace. This exposes a single constructor:
		
		// Arguments:
		// sequence: a midiLib.Sequence which has been constructed from a score.
		// apControlOptions: options that have been set by the user in the options panel.
		// reportEndOfPerformance: a callback function, called when the performance
		//     ends (for any reason).
		// reportMsPosition: a callback function, called when the running
		//     cursor position needs to be updated.
		Assistant(sequence, apControlOptions, reportEndOfPerformance, reportMsPosition);
			An Assistant is created when the user has selected a MIDI input device,
			and clicks the "Start" button on the browser page.

ap/Score.js
	The _AP.score namespace containing a single constructor:

		// Argument:
		// runningMarkerHeightChanged: a callback function, called when the running
		//     marker moves to a new system.
		Score(runningMarkerHeightChanged);
			A Score is created and displayed when the user selects one in the
			score drop down menu in the options panel.
			The Score object is responsible for the graphic appearance and user
			interaction with the score's symbols. In particular, it is responsible
			for moving the running marker during performance. The score is not
			responsible for its containing environment, so the
			runningMarkerHeightChanged callback is used to move the whole
			display, when necessary, to keep the marker in view.

ap/SVG.js
	Workaround to avoid throwing cross-protocol exceptions when accessing SVG files
	from an HTML environment.
	This file defines an onLoad() function which is called by the first page of each
	score when it has loaded. This function sets a local pointer to
	getSVGDocument(embedded_element) [which is also also defined in ap/SVG.js].
	This is a function which returns the xml of the embedded_element, and can be
	called without throwing	a cross-protocol exception.

ap/TracksControl.js
	The tracksControl object. This is the control which appears at the top left of
	the user's score controls. It can be used to turn the performance of tracks
	(voices) on and off. There can be 1 or 2 voices per staff in the score.
	Tracks are ordered by channel, from top to bottom in the score, with channel 0
	being the top voice in each system.

ap/Controls.js
	The functionality for the main user controls panel which appears when the
	Assistant Performer is first loaded into a browser. Contains the functions
	called when clicking on the browser page.
	Has the following API:

		init()
			initialises the controls. In particular, sets up the drop-down
			menues containing MIDI input and output devices, and the available
			scores. This function is called from Main.js (see below).

		doControl(controlID)
			reacts to the corresponding control clicked in the HTML.

		showOverRect(overRectName, disabledName)
		hideOverRect(overRectName)
			these functions change the appearance of score option buttons
			when hovering the mouse over/out of them.

		beginRuntime()
			Called when the "Start" button is clicked.
			The Start button is enabled when both a score and a MIDI output
			device have been selected. If no MIDI input is selected, the
			score can be played back using the other available options
			(speed etc.).

ap/Main.js
	The main entry point to the Assistant Performer's code. Calls
	
		window.addEventListener("load", func, false),

	func, which is defined inline:
	1.	calls MIDILib.jazzWebMIDIAPI.init(window) to ensure that the relevant
		window interfaces are set correctly.
		It should be fairly trivial to adapt the current code to the final
		version of the Web MIDI API, when it is finalised and implemented
		natively in browsers. This call, the file midiLib/JazzWebMIDIAPI.js,
		and the Jazz plug-in can then be removed.
	2.	Retrieves the midiAccess object, currently using the Jazz plugin v1.2
		http://jazz-soft.net/
	3.	Calls _AP.controls.init(midiAccess) to set the contents of the
		device selector menus.

